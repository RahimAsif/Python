def named_args(**kwargs):
    for item in kwargs.keys():
        print(item, kwargs[item])

named_args(a=1, b=2, c=3, eshita='name')





def all_true(items):
    return all(items)

x = all_true([True, True, False])
print(x)






def any_true(items):
    return any(items)

x = any_true([False, False, False])
print(x)


def recursive_factorial(n):
    if n == 1 or n == 0:
        return n
    else:
        return n * recursive_factorial(n - 1)
    

print(recursive_factorial(4))


def recursive_deduplicate(s):
    pass

def recursive_reverse(s):
    length = len(s)
    if length == 0 or length == 1:
        return s
    else:
       return recursive_reverse(s[1:]) + s[0]
    

x= recursive_reverse('the quick brown fox')
print(x)



def max_num(num1, num2, num3):
    if num1 > num2:
        return max(num1, num3)
    else:
        return max(num2, num3)
    

print(max_num(8, 7, 9))



def mult_list(l):
    result = 1
    for item in l:
        result = result * item
    
    return result

print(mult_list([1, 2, 3, 4]))




def rev_string(s):
    length = len(s)
    if length == 0 or length == 1:
        return s
    else:
       return rev_string(s[1:]) + s[0]
    
print(rev_string('hello world'))



def num_within(num, range_low, range_high):
    if num < range_low or num > range_high:
        return False
    else:
        return True

print(num_within(4, 1, 3))






def pascal(n):
    def sum_in_list(l):
        sums = []
        i = 0
        while(i < len(l) - 1):
            item1 = l[i]
            item2 = l[i + 1]
            sum = item1 + item2
            sums.append(sum)
            i = i + 1

        return sums

    triangle = []
    if n == 1:
        triangle.append([1])
    elif n == 2:
        triangle.append([1])
        triangle.append([1, 1])
    else:
        triangle.append([1])
        triangle.append([1, 1])
        for i in range(2, n+1):
            l_prev = triangle[i - 1]
            sums = sum_in_list(l_prev)
            row = []
            row.append(1)
            for item in sums:
                row.append(item)
            row.append(1)
            triangle.append(row)

    for row in triangle:
        print(*row)
    print("'''")


pascal(10)
